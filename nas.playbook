---

- hosts: nas
  become: yes
  vars_files:
    - secrets.yaml
  vars:
    admin_group: admins
    apps_group: apps
    media_group: media
    localgroups:
      - admins
      - apps
      - media
    users:
      - poppy
      - cookiesochocola
    adminusers:
      - poppy
    sysusers:
      - media
    docker_users:
      - ansible
    
  tasks:
    - name: Install NFS server
      ansible.builtin.package:
        name: nfs-kernel-server
        state: present
    - name: Install SMB server
      ansible.builtin.package:
        name: samba
        state: present

    - name: Add smb.conf
      ansible.builtin.copy:
        src: files/smb.conf
        dest: /etc/samba/smb.conf

    - name: Activate SMBD
      ansible.builtin.systemd_service:
        name: "smb"
        enabled: true
        state: "started"



    - name: "Create groups"
      ansible.builtin.group:
        name: "{{ item }}"
      with_items: "{{ localgroups }}"
    - name: "Create user accounts"
      ansible.builtin.user:
        name: "{{ item }}"
        append: yes
        update_password: "on_create"
        password: "{{ accountdefaultpwd }}"
        groups: "{{ media_group }}"
        shell: /bin/bash
      with_items: "{{ users }}"
      register: accounts

    - name: force change password
      command: "chage -d 0 {{ item.name }}"
      when: item.changed
      with_items: "{{ accounts.results }}"

    - name: Fetch current smbpasswd users
      command: /usr/bin/pdbedit -L
      changed_when: false
      register: pdb_users

    - name: Create smbuser
      command: "/usr/bin/smbpasswd -n -a {{ item }}"
      when: item not in pdb_users.stdout 
      with_items: "{{ users }}"
      
    - name: "Add admins to group"
      ansible.builtin.user:
        name: "{{ item }}"
        append: yes
        groups: "{{ admin_group }}"
      with_items: "{{ adminusers }}"
      
    - name: "Create system user"
      ansible.builtin.user:
        name: "{{ item }}"
        append: yes
        password_lock: true
        system: true
        group: "{{ media_group }}"
        groups: 
          - "{{ apps_group }}"
      with_items: "{{ sysusers }}"
      
    - name: Check for ssh pub keys
      ansible.builtin.stat:
        path: "{{ 'files/'+ item + '.pub' }}"
      delegate_to: localhost
      register: path_to_file_stat
      with_items: "{{ users }}"

    - name: "Add authorized keys"
      authorized_key:
        user: "{{ item.item }}"
        key: "{{ lookup('file', item.invocation.module_args.path) }}"
      with_items: "{{ path_to_file_stat.results }}"
      when:
        - item.stat.exists == true
        
    - name: Allow poppy to SUDO All
      community.general.sudoers:
        name: allow-poppy
        state: present
        nopassword: false
        user: poppy
        commands: ALL
        
    - name: Install ACL
      ansible.builtin.package:
        name: acl
        state: present



    - name: Copy manage-share
      ansible.builtin.copy:
        src: files/manage-share.sh
        dest: /srv/manage-share.sh
        mode: '0744'
        
    - name: Copy mkhomedir
      ansible.builtin.copy:
        src: files/mkhomedir.sh
        dest: /srv/mkhomedir.sh
        mode: '0744'
        
    - name: Create /datas
      ansible.builtin.file:
        path: /datas
        state: directory
        mode: '0775'
        
    - name: Create /datas/Shares
      ansible.builtin.file:
        path: /datas/Shares
        state: directory
        mode: '0755'
  
    - name: Create /datas/Shares/usershare
      ansible.builtin.file:
        path: /datas/Shares/usershare
        state: directory
        mode: '0775'  

    - name: Set Global ACL
      ansible.posix.acl:
        path: /datas
        default: true
        recursive: true
        state: present
        entity: "{{ admin_group }}"
        etype: group
        permissions: rwX

    - name: Create MACVLAN network
      docker_network:
        name: macvlan
        driver: macvlan
        driver_options:
          parent: eth0
        ipam_config:
          - subnet: 10.0.0.0/20
            gateway: 10.0.0.1
            iprange: 10.0.3.0/24
            aux_addresses:
              exclude: 10.0.3.0

      